"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.htmlReportFolder = htmlReportFolder;
exports.showHTMLReport = showHTMLReport;
exports.default = void 0;

var _safe = _interopRequireDefault(require("colors/safe"));

var _fs = _interopRequireDefault(require("fs"));

var _open = _interopRequireDefault(require("open"));

var _path = _interopRequireDefault(require("path"));

var _httpServer = require("playwright-core/src/utils/httpServer");

var _utils = require("playwright-core/src/utils/utils");

var _raw = _interopRequireDefault(require("./raw"));

var _assert = _interopRequireDefault(require("assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class HtmlReporter {
  constructor(options = {}) {
    this.config = void 0;
    this.suite = void 0;
    this._outputFolder = void 0;
    // TODO: resolve relative to config.
    this._outputFolder = options.outputFolder;
  }

  onBegin(config, suite) {
    this.config = config;
    this.suite = suite;
  }

  async onEnd() {
    const projectSuites = this.suite.suites;
    const reports = projectSuites.map(suite => {
      const rawReporter = new _raw.default();
      const report = rawReporter.generateProjectReport(this.config, suite);
      return report;
    });
    const reportFolder = htmlReportFolder(this._outputFolder);
    await (0, _utils.removeFolders)([reportFolder]);
    const builder = new HtmlBuilder(reportFolder, this.config.rootDir);
    const ok = builder.build(reports);

    if (!process.env.PWTEST_SKIP_TEST_OUTPUT) {
      if (!ok && !process.env.CI && !process.env.PWTEST_SKIP_TEST_OUTPUT) {
        await showHTMLReport(reportFolder);
      } else {
        console.log('');
        console.log('All tests passed. To open last HTML report run:');
        console.log(_safe.default.cyan(`
  npx playwright show-report
`));
      }
    }
  }

}

function htmlReportFolder(outputFolder) {
  if (process.env[`PLAYWRIGHT_HTML_REPORT`]) return _path.default.resolve(process.cwd(), process.env[`PLAYWRIGHT_HTML_REPORT`]);
  if (outputFolder) return outputFolder;
  return _path.default.resolve(process.cwd(), 'playwright-report');
}

async function showHTMLReport(reportFolder) {
  const folder = reportFolder || htmlReportFolder();

  try {
    (0, _assert.default)(_fs.default.statSync(folder).isDirectory());
  } catch (e) {
    console.log(_safe.default.red(`No report found at "${folder}"`));
    process.exit(1);
    return;
  }

  const server = new _httpServer.HttpServer();
  server.routePrefix('/', (request, response) => {
    let relativePath = new URL('http://localhost' + request.url).pathname;
    if (relativePath === '/') relativePath = '/index.html';

    const absolutePath = _path.default.join(folder, ...relativePath.split('/'));

    return server.serveFile(response, absolutePath);
  });
  const url = await server.start(9323);
  console.log('');
  console.log(_safe.default.cyan(`  Serving HTML report at ${url}. Press Ctrl+C to quit.`));
  (0, _open.default)(url);
  process.on('SIGINT', () => process.exit(0));
  await new Promise(() => {});
}

class HtmlBuilder {
  constructor(outputDir, rootDir) {
    this._reportFolder = void 0;
    this._tests = new Map();
    this._testPath = new Map();
    this._dataFolder = void 0;
    this._hasTraces = false;
    this._reportFolder = _path.default.resolve(process.cwd(), outputDir);
    this._dataFolder = _path.default.join(this._reportFolder, 'data');
  }

  build(rawReports) {
    _fs.default.mkdirSync(this._dataFolder, {
      recursive: true
    });

    const data = new Map();

    for (const projectJson of rawReports) {
      for (const file of projectJson.suites) {
        const fileName = file.location.file;
        const fileId = file.fileId;
        let fileEntry = data.get(fileId);

        if (!fileEntry) {
          fileEntry = {
            testFile: {
              fileId,
              fileName,
              tests: []
            },
            testFileSummary: {
              fileId,
              fileName,
              tests: [],
              stats: emptyStats()
            }
          };
          data.set(fileId, fileEntry);
        }

        const {
          testFile,
          testFileSummary
        } = fileEntry;
        const testEntries = [];

        this._processJsonSuite(file, fileId, projectJson.project.name, [], testEntries);

        for (const test of testEntries) {
          testFile.tests.push(test.testCase);
          testFileSummary.tests.push(test.testCaseSummary);
        }
      }
    }

    let ok = true;

    for (const [fileId, {
      testFile,
      testFileSummary
    }] of data) {
      const stats = testFileSummary.stats;

      for (const test of testFileSummary.tests) {
        if (test.outcome === 'expected') ++stats.expected;
        if (test.outcome === 'skipped') ++stats.skipped;
        if (test.outcome === 'unexpected') ++stats.unexpected;
        if (test.outcome === 'flaky') ++stats.flaky;
        ++stats.total;
        stats.duration += test.duration;
      }

      stats.ok = stats.unexpected + stats.flaky === 0;
      if (!stats.ok) ok = false;
      testFileSummary.tests.sort((t1, t2) => {
        const w1 = (t1.outcome === 'unexpected' ? 1000 : 0) + (t1.outcome === 'flaky' ? 1 : 0);
        const w2 = (t2.outcome === 'unexpected' ? 1000 : 0) + (t2.outcome === 'flaky' ? 1 : 0);
        if (w2 - w1) return w2 - w1;
        return t1.location.line - t2.location.line;
      });

      _fs.default.writeFileSync(_path.default.join(this._dataFolder, fileId + '.json'), JSON.stringify(testFile, undefined, 2));
    }

    const htmlReport = {
      files: [...data.values()].map(e => e.testFileSummary),
      projectNames: rawReports.map(r => r.project.name),
      stats: [...data.values()].reduce((a, e) => addStats(a, e.testFileSummary.stats), emptyStats())
    };
    htmlReport.files.sort((f1, f2) => {
      const w1 = f1.stats.unexpected * 1000 + f1.stats.flaky;
      const w2 = f2.stats.unexpected * 1000 + f2.stats.flaky;
      return w2 - w1;
    });

    _fs.default.writeFileSync(_path.default.join(this._dataFolder, 'report.json'), JSON.stringify(htmlReport, undefined, 2)); // Copy app.


    const appFolder = _path.default.join(require.resolve('playwright-core'), '..', 'lib', 'webpack', 'htmlReport');

    for (const file of _fs.default.readdirSync(appFolder)) {
      if (file.endsWith('.map')) continue;

      _fs.default.copyFileSync(_path.default.join(appFolder, file), _path.default.join(this._reportFolder, file));
    } // Copy trace viewer.


    if (this._hasTraces) {
      const traceViewerFolder = _path.default.join(require.resolve('playwright-core'), '..', 'lib', 'webpack', 'traceViewer');

      const traceViewerTargetFolder = _path.default.join(this._reportFolder, 'trace');

      _fs.default.mkdirSync(traceViewerTargetFolder, {
        recursive: true
      });

      for (const file of _fs.default.readdirSync(traceViewerFolder)) {
        if (file.endsWith('.map')) continue;

        _fs.default.copyFileSync(_path.default.join(traceViewerFolder, file), _path.default.join(traceViewerTargetFolder, file));
      }
    }

    return ok;
  }

  _processJsonSuite(suite, fileId, projectName, path, out) {
    const newPath = [...path, suite.title];
    suite.suites.map(s => this._processJsonSuite(s, fileId, projectName, newPath, out));
    suite.tests.forEach(t => out.push(this._createTestEntry(t, fileId, projectName, newPath)));
  }

  _createTestEntry(test, fileId, projectName, path) {
    const duration = test.results.reduce((a, r) => a + r.duration, 0);

    this._tests.set(test.testId, test);

    const location = test.location;
    path = [location.file + ':' + location.line, ...path.slice(1)];

    this._testPath.set(test.testId, path);

    return {
      testCase: {
        testId: test.testId,
        title: test.title,
        projectName,
        location,
        duration,
        outcome: test.outcome,
        path,
        results: test.results.map(r => this._createTestResult(r)),
        ok: test.outcome === 'expected' || test.outcome === 'flaky'
      },
      testCaseSummary: {
        testId: test.testId,
        title: test.title,
        projectName,
        location,
        duration,
        outcome: test.outcome,
        path,
        ok: test.outcome === 'expected' || test.outcome === 'flaky'
      }
    };
  }

  _createTestResult(result) {
    let lastAttachment;
    return {
      duration: result.duration,
      startTime: result.startTime,
      retry: result.retry,
      steps: result.steps.map(s => this._createTestStep(s)),
      error: result.error,
      status: result.status,
      attachments: result.attachments.map(a => {
        if (a.name === 'trace') this._hasTraces = true;

        if (a.path) {
          let fileName = a.path;

          try {
            const buffer = _fs.default.readFileSync(a.path);

            const sha1 = (0, _utils.calculateSha1)(buffer) + _path.default.extname(a.path);

            fileName = 'data/' + sha1;

            _fs.default.writeFileSync(_path.default.join(this._reportFolder, 'data', sha1), buffer);
          } catch (e) {}

          return {
            name: a.name,
            contentType: a.contentType,
            path: fileName,
            body: a.body
          };
        }

        if ((a.name === 'stdout' || a.name === 'stderr') && a.contentType === 'text/plain' && lastAttachment && lastAttachment.name === a.name && lastAttachment.contentType === a.contentType) {
          lastAttachment.body += a.body;
          return null;
        }

        lastAttachment = a;
        return a;
      }).filter(Boolean)
    };
  }

  _createTestStep(step) {
    return {
      title: step.title,
      startTime: step.startTime,
      duration: step.duration,
      snippet: step.snippet,
      steps: step.steps.map(s => this._createTestStep(s)),
      location: step.location,
      error: step.error
    };
  }

}

const emptyStats = () => {
  return {
    total: 0,
    expected: 0,
    unexpected: 0,
    flaky: 0,
    skipped: 0,
    ok: true,
    duration: 0
  };
};

const addStats = (stats, delta) => {
  stats.total += delta.total;
  stats.skipped += delta.skipped;
  stats.expected += delta.expected;
  stats.unexpected += delta.unexpected;
  stats.flaky += delta.flaky;
  stats.ok = stats.ok && delta.ok;
  stats.duration += delta.duration;
  return stats;
};

var _default = HtmlReporter;
exports.default = _default;